;;; SLR1-parser generated by GRM Parser Builder
;;; (C) 2001-2011, Andrej Andrejev

;;; INPUT-FN is a function returning (terminal . value) pairs
;;; or NIL when input is exhausted
;;; DATA is any data structure transmitted to the parser and visible in reduce actions

(defun yy-slr1-parser (input-fn data)
  (let ((stack '((^))) ; contains pairs (key . value), ^ is bottom-marker
        (input (funcall input-fn)) (delayed-input nil))
    (flet ((shift (key) ; SHIFT op
             (push (cons key (cdr input)) stack) ; push new key with input value
             (if delayed-input (progn (setq input delayed-input)
                                      (setq delayed-input nil)) ; restore input after REDUCE
               (setq input (funcall input-fn)))) ; feed input
           (reduce (n) ; REDUCE op: returns list of n top values from stack
             (let ((values nil))
               (dotimes (i n) (push (cdr (pop stack)) values))
               (setq delayed-input input) ; non-terminal will be put into INPUT
               values)))
      (do () (nil t) ; main cycle - no stop condition
       (unless input (setq input (cons '-! nil))) ; end-marker
       (selectq (caar stack) ; outer KEY switch
         (<RULES>-10.1
           (selectq (car input)
            ((DOUBLE-PERCENT -!) ; REDUCE(10) op
              (setq input (cons '<RULES> (apply #'(LAMBDA (A B) (CONS A B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(DOUBLE-PERCENT -!) input))))
         (<RIGHTPARTS>-13.1
           (selectq (car input)
            ((SEMICOLON) ; REDUCE(13) op
              (setq input (cons '<RIGHTPARTS> (apply #'(LAMBDA (A B C) (CONS A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(SEMICOLON) input))))
         (<RIGHTPART>-17.1
           (selectq (car input)
            ((SEMICOLON DECL BAR) ; REDUCE(17) op
              (setq input (cons '<RIGHTPART> (apply #'(LAMBDA (A B) (CONS A B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(SEMICOLON DECL BAR) input))))
         (<RIGHTPART>-18.1
           (selectq (car input)
            ((SEMICOLON DECL BAR) ; REDUCE(18) op
              (setq input (cons '<RIGHTPART> (apply #'(LAMBDA (A B) (CONS A B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(SEMICOLON DECL BAR) input))))
         (STRING-8.1
           (selectq (car input)
            ((SEMICOLON STRING ID DECL BAR DOUBLE-PERCENT) ; REDUCE(8) op
              (setq input (cons '<DECL> (apply #'(LAMBDA (A B) (APPEND A (LIST B))) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(SEMICOLON STRING ID DECL BAR DOUBLE-PERCENT) input))))
         (ID-7.1
           (selectq (car input)
            ((SEMICOLON STRING ID DECL BAR DOUBLE-PERCENT) ; REDUCE(7) op
              (setq input (cons '<DECL> (apply #'(LAMBDA (A B) (APPEND A (LIST B))) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(SEMICOLON STRING ID DECL BAR DOUBLE-PERCENT) input))))
         (SEMICOLON-11.1
           (selectq (car input)
            ((ID DOUBLE-PERCENT -!) ; REDUCE(11) op
              (setq input (cons '<RULE> (apply #'(LAMBDA (A B C D) (CONS A C)) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(ID DOUBLE-PERCENT -!) input))))
         (<RULES>-1.1
           (selectq (car input)
            ((DOUBLE-PERCENT -!) ; REDUCE(1) op
              (setq input (cons '<YY-FILE> (apply #'(LAMBDA (A B C) (LIST A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(DOUBLE-PERCENT -!) input))))
         (DOUBLE-PERCENT-2.1
           (selectq (car input)
            ((DOUBLE-PERCENT -!) ; REDUCE(2) op
              (setq input (cons '<YY-FILE> (nth 0 (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(DOUBLE-PERCENT -!) input))))
         (DECL-6.1
           (selectq (car input)
            ((SEMICOLON STRING ID DECL BAR DOUBLE-PERCENT) ; REDUCE(6) op
              (setq input (cons '<DECL> (apply #'(LAMBDA (A) (LIST A)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(SEMICOLON STRING ID DECL BAR DOUBLE-PERCENT) input))))
         (<DECLS>-5.1
           (selectq (car input)
            ((DOUBLE-PERCENT) ; REDUCE(5) op
              (setq input (cons '<DECLS> (apply #'(LAMBDA (A B C) (CONS A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(DOUBLE-PERCENT) input))))
         (<DECLS>-4.1
           (selectq (car input)
            ((DOUBLE-PERCENT) ; REDUCE(4) op
              (setq input (cons '<DECLS> (apply #'(LAMBDA (A B) (CONS A B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(DOUBLE-PERCENT) input))))
         (^
           (selectq (car input)
            (<DECL> (shift '<DECL>-3.1-4.2-5.3-7.2-8.2)) ; REDUCE completion
            (<YY-FILE> (shift '<YY-FILE>-0.0-2.2)) ; REDUCE completion
            (<DECLS> (shift '<DECLS>-1.3)) ; REDUCE completion
            (DECL (shift 'DECL-6.1)) ; SHIFT op
            ((-!) (return nil)) ; ACCEPT EMPTY INPUT
            (return (list 'SYNTAX-ERROR (caar stack) '(DECL) input))))
         (<DECLS>-1.3
           (selectq (car input)
            (DOUBLE-PERCENT (shift 'DOUBLE-PERCENT-1.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(DOUBLE-PERCENT) input))))
         (DOUBLE-PERCENT-1.2
           (selectq (car input)
            (<RULES> (shift '<RULES>-1.1)) ; REDUCE completion
            (<RULE> (shift '<RULE>-9.1-10.2)) ; REDUCE completion
            (ID (shift 'ID-11.4)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ID) input))))
         (<RULE>-9.1-10.2
           (selectq (car input)
            (<RULES> (shift '<RULES>-10.1)) ; REDUCE completion
            (<RULE> (shift '<RULE>-9.1-10.2)) ; REDUCE completion
            ((DOUBLE-PERCENT -!) ; REDUCE(9) op
              (setq input (cons '<RULES> (apply #'(LAMBDA (A) (LIST A)) (reduce 1)))))
            (ID (shift 'ID-11.4)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(DOUBLE-PERCENT -! ID) input))))
         (ID-11.4
           (selectq (car input)
            (COLON (shift 'COLON-11.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(COLON) input))))
         (COLON-11.3
           (selectq (car input)
            (<RIGHTPARTS> (shift '<RIGHTPARTS>-11.2)) ; REDUCE completion
            (<RIGHTPART> (shift '<RIGHTPART>-14.1-15.2)) ; REDUCE completion
            (<RIGHTPART-EX> (shift '<RIGHTPART-EX>-12.1-13.3)) ; REDUCE completion
            ((SEMICOLON DECL BAR) ; REDUCE(16) op
              (setq input (cons '<RIGHTPART> (prog1 nil (reduce 0)))))
            (ID (shift 'ID-17.2)) ; SHIFT op
            (STRING (shift 'STRING-18.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(SEMICOLON DECL BAR ID STRING) input))))
         (<RIGHTPART-EX>-12.1-13.3
           (selectq (car input)
            ((SEMICOLON) ; REDUCE(12) op
              (setq input (cons '<RIGHTPARTS> (apply #'(LAMBDA (A) (LIST A)) (reduce 1)))))
            (BAR (shift 'BAR-13.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(SEMICOLON BAR) input))))
         (BAR-13.2
           (selectq (car input)
            (<RIGHTPARTS> (shift '<RIGHTPARTS>-13.1)) ; REDUCE completion
            (<RIGHTPART> (shift '<RIGHTPART>-14.1-15.2)) ; REDUCE completion
            (<RIGHTPART-EX> (shift '<RIGHTPART-EX>-12.1-13.3)) ; REDUCE completion
            ((SEMICOLON DECL BAR) ; REDUCE(16) op
              (setq input (cons '<RIGHTPART> (prog1 nil (reduce 0)))))
            (ID (shift 'ID-17.2)) ; SHIFT op
            (STRING (shift 'STRING-18.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(SEMICOLON DECL BAR ID STRING) input))))
         (ID-17.2
           (selectq (car input)
            (<RIGHTPART> (shift '<RIGHTPART>-17.1)) ; REDUCE completion
            ((SEMICOLON DECL BAR) ; REDUCE(16) op
              (setq input (cons '<RIGHTPART> (prog1 nil (reduce 0)))))
            (ID (shift 'ID-17.2)) ; SHIFT op
            (STRING (shift 'STRING-18.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(SEMICOLON DECL BAR ID STRING) input))))
         (STRING-18.2
           (selectq (car input)
            (<RIGHTPART> (shift '<RIGHTPART>-18.1)) ; REDUCE completion
            ((SEMICOLON DECL BAR) ; REDUCE(16) op
              (setq input (cons '<RIGHTPART> (prog1 nil (reduce 0)))))
            (ID (shift 'ID-17.2)) ; SHIFT op
            (STRING (shift 'STRING-18.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(SEMICOLON DECL BAR ID STRING) input))))
         (<RIGHTPART>-14.1-15.2
           (selectq (car input)
            (<DECL> (shift '<DECL>-7.2-8.2-15.1)) ; REDUCE completion
            ((BAR SEMICOLON) ; REDUCE(14) op
              (setq input (cons '<RIGHTPART-EX> (nth 0 (reduce 1)))))
            (DECL (shift 'DECL-6.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(BAR SEMICOLON DECL) input))))
         (<DECL>-7.2-8.2-15.1
           (selectq (car input)
            ((BAR SEMICOLON) ; REDUCE(15) op
              (setq input (cons '<RIGHTPART-EX> (apply #'(LAMBDA (A B) (CONS B A)) (reduce 2)))))
            (STRING (shift 'STRING-8.1)) ; SHIFT op
            (ID (shift 'ID-7.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(BAR SEMICOLON STRING ID) input))))
         (<RIGHTPARTS>-11.2
           (selectq (car input)
            (SEMICOLON (shift 'SEMICOLON-11.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(SEMICOLON) input))))
         (<YY-FILE>-0.0-2.2
           (selectq (car input)
            ((-!) (return (cdar stack))) ; ACCEPT op
            (DOUBLE-PERCENT (shift 'DOUBLE-PERCENT-2.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(-! DOUBLE-PERCENT) input))))
         (<DECL>-3.1-4.2-5.3-7.2-8.2
           (selectq (car input)
            (<DECLS> (shift '<DECLS>-4.1)) ; REDUCE completion
            (<DECL> (shift '<DECL>-3.1-4.2-5.3-7.2-8.2)) ; REDUCE completion
            ((DOUBLE-PERCENT) ; REDUCE(3) op
              (setq input (cons '<DECLS> (apply #'(LAMBDA (A) (LIST A)) (reduce 1)))))
            (STRING (shift 'STRING-8.1)) ; SHIFT op
            (ID (shift 'ID-7.1)) ; SHIFT op
            (SEMICOLON (shift 'SEMICOLON-5.2)) ; SHIFT op
            (DECL (shift 'DECL-6.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(DOUBLE-PERCENT STRING ID SEMICOLON DECL) input))))
         (SEMICOLON-5.2
           (selectq (car input)
            (<DECLS> (shift '<DECLS>-5.1)) ; REDUCE completion
            (<DECL> (shift '<DECL>-3.1-4.2-5.3-7.2-8.2)) ; REDUCE completion
            (DECL (shift 'DECL-6.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(DECL) input))))
         (return 'INTERNAL-ERROR))))))
