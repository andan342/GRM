;;; SLR1-parser generated by GRM Parser Builder
;;; (C) 2001-2011, Andrej Andrejev

;;; INPUT-FN is a function returning (terminal . value) pairs
;;; or NIL when input is exhausted
;;; DATA is any data structure transmitted to the parser and visible in reduce actions

(defun ebnf-slr1-parser (input-fn data)
  (let ((stack '((^))) ; contains pairs (key . value), ^ is bottom-marker
        (input (funcall input-fn)) (delayed-input nil))
    (flet ((shift (key) ; SHIFT op
             (push (cons key (cdr input)) stack) ; push new key with input value
             (if delayed-input (progn (setq input delayed-input)
                                      (setq delayed-input nil)) ; restore input after REDUCE
               (setq input (funcall input-fn)))) ; feed input
           (reduce (n) ; REDUCE op: returns list of n top values from stack
             (let ((values nil))
               (dotimes (i n) (push (cdr (pop stack)) values))
               (setq delayed-input input) ; non-terminal will be put into INPUT
               values)))
      (do () (nil t) ; main cycle - no stop condition
       (unless input (setq input (cons '-! nil))) ; end-marker
       (selectq (caar stack) ; outer KEY switch
         (<RULE>-1.1
           (selectq (car input)
            ((LEFT-BRACKET -!) ; REDUCE(1) op
              (setq input (cons '<RULES> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACKET -!) input))))
         (<RULE>-2.1
           (selectq (car input)
            ((LEFT-BRACKET -!) ; REDUCE(2) op
              (setq input (cons '<RULES> (nth 1 (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACKET -!) input))))
         (<RIGHT-PART>-5.1
           (selectq (car input)
            ((LEFT-BRACKET RIGHT-PAR -!) ; REDUCE(5) op
              (setq input (cons '<RIGHT-PART> (apply #'(LAMBDA (A B C) (APPEND A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACKET RIGHT-PAR -!) input))))
         (ASTERISK-11.1
           (selectq (car input)
            ((ID STRING LEFT-PAR RIGHT-PAR LEFT-BRACKET BAR -!) ; REDUCE(11) op
              (setq input (cons '<UNARY> (apply #'(LAMBDA (A B) (LIST NIL (LIST (MAKE-PLUS-SYMBOL A DATA)))) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(ID STRING LEFT-PAR RIGHT-PAR LEFT-BRACKET BAR -!) input))))
         (PLUS-10.1
           (selectq (car input)
            ((ID STRING LEFT-PAR RIGHT-PAR LEFT-BRACKET BAR -!) ; REDUCE(10) op
              (setq input (cons '<UNARY> (apply #'(LAMBDA (A B) (LIST (LIST (MAKE-PLUS-SYMBOL A DATA)))) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(ID STRING LEFT-PAR RIGHT-PAR LEFT-BRACKET BAR -!) input))))
         (QUESTION-9.1
           (selectq (car input)
            ((ID STRING LEFT-PAR RIGHT-PAR LEFT-BRACKET BAR -!) ; REDUCE(9) op
              (setq input (cons '<UNARY> (apply #'(LAMBDA (A B) (CONS NIL A)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(ID STRING LEFT-PAR RIGHT-PAR LEFT-BRACKET BAR -!) input))))
         (RIGHT-PAR-14.1
           (selectq (car input)
            ((ASTERISK PLUS QUESTION BAR LEFT-BRACKET RIGHT-PAR ID STRING LEFT-PAR -!) ; REDUCE(14) op
              (setq input (cons '<ATOM-OR-PAREXPR> (nth 1 (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(ASTERISK PLUS QUESTION BAR LEFT-BRACKET RIGHT-PAR ID STRING LEFT-PAR -!) input))))
         (STRING-13.1
           (selectq (car input)
            ((ASTERISK PLUS QUESTION BAR LEFT-BRACKET RIGHT-PAR ID STRING LEFT-PAR -!) ; REDUCE(13) op
              (setq input (cons '<ATOM-OR-PAREXPR> (apply #'(LAMBDA (A) (LIST (LIST A))) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(ASTERISK PLUS QUESTION BAR LEFT-BRACKET RIGHT-PAR ID STRING LEFT-PAR -!) input))))
         (ID-12.1
           (selectq (car input)
            ((ASTERISK PLUS QUESTION BAR LEFT-BRACKET RIGHT-PAR ID STRING LEFT-PAR -!) ; REDUCE(12) op
              (setq input (cons '<ATOM-OR-PAREXPR> (apply #'(LAMBDA (A) (LIST (LIST A))) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(ASTERISK PLUS QUESTION BAR LEFT-BRACKET RIGHT-PAR ID STRING LEFT-PAR -!) input))))
         (<ALTERNATIVE>-7.1
           (selectq (car input)
            ((LEFT-BRACKET BAR RIGHT-PAR -!) ; REDUCE(7) op
              (setq input (cons '<ALTERNATIVE> (apply #'(LAMBDA (A B) (LET ((B-REV (NREVERSE B)) RES) (DOLIST (LBRANCH (NREVERSE A) RES) (DOLIST (RBRANCH B-REV) (PUSH (APPEND LBRANCH RBRANCH) RES))))) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACKET BAR RIGHT-PAR -!) input))))
         (<RIGHT-PART>-3.1
           (selectq (car input)
            ((LEFT-BRACKET -!) ; REDUCE(3) op
              (setq input (cons '<RULE> (apply #'(LAMBDA (A B C D E F) (PUSH (MAKE-EBNF-RULE :LEFT D :ALTS F :COMMENT (CONCAT "[" B "]")) (EBNF-PARSER-DATA-RULES DATA)) (LET ((AR (EBNF-PARSER-DATA-AUX-RULES DATA))) (WHEN AR (SETF (EBNF-PARSER-DATA-RULES DATA) (APPEND AR (EBNF-PARSER-DATA-RULES DATA))) (SETF (EBNF-PARSER-DATA-AUX-RULES DATA) NIL)))) (reduce 6)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACKET -!) input))))
         (^
           (selectq (car input)
            (<RULES> (shift '<RULES>-0.0-2.2)) ; REDUCE completion
            (<RULE> (shift '<RULE>-1.1)) ; REDUCE completion
            (LEFT-BRACKET (shift 'LEFT-BRACKET-3.6)) ; SHIFT op
            ((-!) (return nil)) ; ACCEPT EMPTY INPUT
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACKET) input))))
         (<RULES>-0.0-2.2
           (selectq (car input)
            (<RULE> (shift '<RULE>-2.1)) ; REDUCE completion
            ((-!) (return (cdar stack))) ; ACCEPT op
            (LEFT-BRACKET (shift 'LEFT-BRACKET-3.6)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(-! LEFT-BRACKET) input))))
         (LEFT-BRACKET-3.6
           (selectq (car input)
            (INT (shift 'INT-3.5)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(INT) input))))
         (INT-3.5
           (selectq (car input)
            (RIGHT-BRACKET (shift 'RIGHT-BRACKET-3.4)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACKET) input))))
         (RIGHT-BRACKET-3.4
           (selectq (car input)
            (ID (shift 'ID-3.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ID) input))))
         (ID-3.3
           (selectq (car input)
            (CCE (shift 'CCE-3.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(CCE) input))))
         (CCE-3.2
           (selectq (car input)
            (<RIGHT-PART> (shift '<RIGHT-PART>-3.1)) ; REDUCE completion
            (<UNARY> (shift '<UNARY>-6.1-7.2)) ; REDUCE completion
            (<ATOM-OR-PAREXPR> (shift '<ATOM-OR-PAREXPR>-8.1-9.2-10.2-11.2)) ; REDUCE completion
            (<ALTERNATIVE> (shift '<ALTERNATIVE>-4.1-5.3)) ; REDUCE completion
            (LEFT-PAR (shift 'LEFT-PAR-14.3)) ; SHIFT op
            (STRING (shift 'STRING-13.1)) ; SHIFT op
            (ID (shift 'ID-12.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR STRING ID) input))))
         (<ALTERNATIVE>-4.1-5.3
           (selectq (car input)
            ((LEFT-BRACKET RIGHT-PAR -!) ; REDUCE(4) op
              (setq input (cons '<RIGHT-PART> (nth 0 (reduce 1)))))
            (BAR (shift 'BAR-5.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACKET RIGHT-PAR -! BAR) input))))
         (BAR-5.2
           (selectq (car input)
            (<RIGHT-PART> (shift '<RIGHT-PART>-5.1)) ; REDUCE completion
            (<UNARY> (shift '<UNARY>-6.1-7.2)) ; REDUCE completion
            (<ATOM-OR-PAREXPR> (shift '<ATOM-OR-PAREXPR>-8.1-9.2-10.2-11.2)) ; REDUCE completion
            (<ALTERNATIVE> (shift '<ALTERNATIVE>-4.1-5.3)) ; REDUCE completion
            (LEFT-PAR (shift 'LEFT-PAR-14.3)) ; SHIFT op
            (STRING (shift 'STRING-13.1)) ; SHIFT op
            (ID (shift 'ID-12.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR STRING ID) input))))
         (<ATOM-OR-PAREXPR>-8.1-9.2-10.2-11.2
           (selectq (car input)
            ((ID STRING LEFT-PAR RIGHT-PAR LEFT-BRACKET BAR -!) ; REDUCE(8) op
              (setq input (cons '<UNARY> (nth 0 (reduce 1)))))
            (ASTERISK (shift 'ASTERISK-11.1)) ; SHIFT op
            (PLUS (shift 'PLUS-10.1)) ; SHIFT op
            (QUESTION (shift 'QUESTION-9.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ID STRING LEFT-PAR RIGHT-PAR LEFT-BRACKET BAR -! ASTERISK PLUS QUESTION) input))))
         (LEFT-PAR-14.3
           (selectq (car input)
            (<RIGHT-PART> (shift '<RIGHT-PART>-14.2)) ; REDUCE completion
            (<UNARY> (shift '<UNARY>-6.1-7.2)) ; REDUCE completion
            (<ATOM-OR-PAREXPR> (shift '<ATOM-OR-PAREXPR>-8.1-9.2-10.2-11.2)) ; REDUCE completion
            (<ALTERNATIVE> (shift '<ALTERNATIVE>-4.1-5.3)) ; REDUCE completion
            (LEFT-PAR (shift 'LEFT-PAR-14.3)) ; SHIFT op
            (STRING (shift 'STRING-13.1)) ; SHIFT op
            (ID (shift 'ID-12.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR STRING ID) input))))
         (<RIGHT-PART>-14.2
           (selectq (car input)
            (RIGHT-PAR (shift 'RIGHT-PAR-14.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR) input))))
         (<UNARY>-6.1-7.2
           (selectq (car input)
            (<ALTERNATIVE> (shift '<ALTERNATIVE>-7.1)) ; REDUCE completion
            (<ATOM-OR-PAREXPR> (shift '<ATOM-OR-PAREXPR>-8.1-9.2-10.2-11.2)) ; REDUCE completion
            (<UNARY> (shift '<UNARY>-6.1-7.2)) ; REDUCE completion
            ((LEFT-BRACKET BAR RIGHT-PAR -!) ; REDUCE(6) op
              (setq input (cons '<ALTERNATIVE> (nth 0 (reduce 1)))))
            (ID (shift 'ID-12.1)) ; SHIFT op
            (STRING (shift 'STRING-13.1)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-14.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACKET BAR RIGHT-PAR -! ID STRING LEFT-PAR) input))))
         (return 'INTERNAL-ERROR))))))
